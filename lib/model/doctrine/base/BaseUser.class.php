<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $username
 * @property string $email
 * @property string $password
 * @property enum $level
 * 
 * @method string getName()     Returns the current record's "name" value
 * @method string getUsername() Returns the current record's "username" value
 * @method string getEmail()    Returns the current record's "email" value
 * @method string getPassword() Returns the current record's "password" value
 * @method enum   getLevel()    Returns the current record's "level" value
 * @method User   setName()     Sets the current record's "name" value
 * @method User   setUsername() Sets the current record's "username" value
 * @method User   setEmail()    Sets the current record's "email" value
 * @method User   setPassword() Sets the current record's "password" value
 * @method User   setLevel()    Sets the current record's "level" value
 * 
 * @package    swbrasil
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('username', 'string', 50, array(
             'unique' => true,
             'type' => 'string',
             'notnull' => true,
             'length' => '50',
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('password', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '40',
             ));
        $this->hasColumn('level', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'administrador',
             ),
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}